# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ANADataAcquisition
                                 A QGIS plugin
 The ANA Data Acquisition tool automatically downloads several pluviometric and fluviometric stations provided by the brazilian National Water Agency (ANA)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by HGE-IPH
        email                : ingridp8396@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, pyqtSlot
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox, QProgressBar
from qgis.gui import QgsMessageBar
from qgis.core import QgsVectorLayer, QgsProject

from qgis.utils import iface
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .ana_data_acquisition_dockwidget import ANADataAcquisitionDockWidget
import os.path
import os
import shutil


class ANADataAcquisition:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        
        # self.layers = {'prec': None, 'dis': None, 'level': None}

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ANADataAcquisition_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ANA Data Acquisition')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ANADataAcquisition')
        self.toolbar.setObjectName(u'ANADataAcquisition')

        #print "** INITIALIZING ANADataAcquisition"

        self.pluginIsActive = False
        # self.dockwidget = None
        
        self.dockwidget = ANADataAcquisitionDockWidget()
        
        os.chdir('C:')
        self.dir = 'C:/'
        self.plugdir = os.path.dirname(__file__)
        for i in self.plugdir:
            if i == '\\':
                self.plugdir = self.plugdir.replace('\\', '/')
                
       # self.dockwidget.comboBox.currentIndexChanged.connect(self.insertMap)
        self.dockwidget.comboBox.currentIndexChanged.connect(self.mapInsert)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ANADataAcquisition', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.action = QAction(QIcon(self.plugdir + '/icon.png'), 'ANA Data Acquisition', self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu('&IPH - Plugins', self.action)

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING ANADataAcquisition"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD ANADataAcquisition"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ANA Data Acquisition'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    #Insert the stations's shape according to the user's choice            
    def mapInsert(self):
        
        index = self.dockwidget.comboBox.currentIndex()
        prec = "Precipitation_ANA" 
        dis = "Discharge_Level_ANA"
        level = "Discharge_Level_ANA"

        if index == 0:
                self.removeLayer()
                        
        if index == 1:
                self.removeLayer()
                self.addLayer(prec)
            
        if index == 2:
                self.removeLayer()
                self.addLayer(dis)
                
        if index == 3:
                self.removeLayer()
                self.addLayer(level)
            
                       
    def addLayer(self, tipo):
        shape = QgsVectorLayer(self.plugdir + "/data/" + tipo + ".shp", tipo,"ogr")
        QgsProject.instance().addMapLayer(shape)
            
        
    def removeLayer(self):
        layerMap = QgsProject.instance().mapLayers()
        
        for name, layer in layerMap.items():
            if "Precipitation_ANA" == str(layer.name()):
                registry = QgsProject.instance()
                layerPrec = registry.mapLayersByName("Precipitation_ANA")[0]
                QgsProject.instance().removeMapLayer(layerPrec)
                
            elif "Discharge_Level_ANA" == str(layer.name()):
                registry = QgsProject.instance()
                layerDis = registry.mapLayersByName("Discharge_Level_ANA")[0]
                QgsProject.instance().removeMapLayer(layerDis)
                  
    def verifyLayer(self):
        layerMap = QgsProject.instance().mapLayers()
        for name, layer in layerMap.items():
            if "Precipitation_ANA" == str(layer.name()):
                registry = QgsProject.instance()
                layerPrec = registry.mapLayersByName("Precipitation_ANA")[0]
                return layerPrec
                
            elif "Discharge_Level_ANA" == str(layer.name()):
                registry = QgsProject.instance()
                layerDis = registry.mapLayersByName("Discharge_Level_ANA")[0]
                return layerDis
        
        
    def selectOutputDir(self):
            dirname = QFileDialog.getExistingDirectory(None, "Open a folder", "C://")
            self.dockwidget.lineEdit.setText(dirname)
            
    #--------------------------------------------------------------------------
            
    # lógica para pegar as features selecionadas e gerar arquivo das estações
    def gauge(self):
         

        index = self.dockwidget.comboBox.currentIndex()
        downDir = self.dockwidget.lineEdit.text()

        if downDir == "":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please chose the destination folder.")
            msg.exec_()
            return  
        
        if index == 1:
            arquivo = open(downDir + '/gauges_precipitation.txt', 'w')
            
        if index == 2:
            arquivo = open(downDir + '/gauges_discharge.txt', 'w')

        if index == 3:
            arquivo = open(downDir + '/gauges_level.txt', 'w')
            
        layer = self.verifyLayer()
        selection = layer.selectedFeatures()
        print(layer)
            
        Codigo = []               
        for f in selection:
            line = '%d' % (f['Codigo']) #%i
            Codigo.append(line)   
            arquivo.write(line + "\n")      
    
            
        if len(Codigo) == 0:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select the stations.")
            msg.exec_()
            return
    
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText('Done! Check for the file "gauges_.txt" ')
        msg.exec_()
        
    #--------------------------------------------------------------------------
            
    #Open the executable download software    
    def download(self):        
        os.system(self.plugdir + '/data/Down_ANA.exe')

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        
        

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING ANADataAcquisition"

            self.dockwidget.pushButton_3.clicked.connect(self.selectOutputDir)
                    
            self.dockwidget.comboBox.clear()
        
            self.dockwidget.show()
            
            self.dockwidget.comboBox.currentIndexChanged.connect(self.mapInsert)    
            
            self.dockwidget.pushButton_2.clicked.connect(self.download)
            
            self.dockwidget.pushButton.clicked.connect(self.gauge)
            
            listInfos = [" ", "Precipitation", "Discharge", u"Level"]        
            
            self.dockwidget.comboBox.addItems(listInfos)
            
            self.removeLayer()


            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = ANADataAcquisitionDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
            
            
            
            
            
